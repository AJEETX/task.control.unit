// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using risk.control.system.Data;

#nullable disable

namespace risk.control.system.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("ClientCompanyVendor", b =>
                {
                    b.Property<string>("ClientsClientCompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmpanelledVendorsVendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClientsClientCompanyId", "EmpanelledVendorsVendorId");

                    b.HasIndex("EmpanelledVendorsVendorId");

                    b.ToTable("ClientCompanyVendor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<long>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("risk.control.system.Models.AgentReport", b =>
                {
                    b.Property<string>("AgentReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentEmail")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("AgentLocationPicture")
                        .HasColumnType("BLOB");

                    b.Property<string>("AgentLocationPictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentOcrData")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("AgentOcrPicture")
                        .HasColumnType("BLOB");

                    b.Property<string>("AgentOcrUrl")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("AgentQrPicture")
                        .HasColumnType("BLOB");

                    b.Property<string>("AgentQrUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentRemarks")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AgentRemarksUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LongLat")
                        .HasColumnType("TEXT");

                    b.Property<string>("QrData")
                        .HasColumnType("TEXT");

                    b.HasKey("AgentReportId");

                    b.ToTable("AgentReport");
                });

            modelBuilder.Entity("risk.control.system.Models.ApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ApplicationUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("risk.control.system.Models.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Addressline")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DistrictId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsClientAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVendorAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("MobileUId")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PinCodeId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("BLOB");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecretPin")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("StateId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PinCodeId");

                    b.HasIndex("StateId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("risk.control.system.Models.Audit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("NewValues")
                        .HasColumnType("TEXT");

                    b.Property<string>("OldValues")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("TableName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("risk.control.system.Models.BeneficiaryRelation", b =>
                {
                    b.Property<long>("BeneficiaryRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("BeneficiaryRelationId");

                    b.ToTable("BeneficiaryRelation");
                });

            modelBuilder.Entity("risk.control.system.Models.CaseEnabler", b =>
                {
                    b.Property<string>("CaseEnablerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("CaseEnablerId");

                    b.ToTable("CaseEnabler");
                });

            modelBuilder.Entity("risk.control.system.Models.CaseLocation", b =>
                {
                    b.Property<long>("CaseLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Addressline")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Addressline2")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssignedAgentUserEmail")
                        .HasColumnType("TEXT");

                    b.Property<long>("BeneficiaryContactNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BeneficiaryDateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<int?>("BeneficiaryIncome")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("BeneficiaryRelationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimsInvestigationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("DistrictId")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvestigationCaseSubStatusId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsReviewCaseLocation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PinCodeId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("BLOB");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("StateId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("CaseLocationId");

                    b.HasIndex("BeneficiaryRelationId");

                    b.HasIndex("ClaimsInvestigationId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("InvestigationCaseSubStatusId");

                    b.HasIndex("PinCodeId");

                    b.HasIndex("StateId");

                    b.HasIndex("VendorId");

                    b.ToTable("CaseLocation");
                });

            modelBuilder.Entity("risk.control.system.Models.ClaimMessage", b =>
                {
                    b.Property<string>("ClaimMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimsInvestigationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecepicientEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderEmail")
                        .HasColumnType("TEXT");

                    b.HasKey("ClaimMessageId");

                    b.HasIndex("ClaimsInvestigationId");

                    b.ToTable("ClaimMessage");
                });

            modelBuilder.Entity("risk.control.system.Models.ClaimNote", b =>
                {
                    b.Property<string>("ClaimNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimsInvestigationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentClaimNoteClaimNoteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("ClaimNoteId");

                    b.HasIndex("ClaimsInvestigationId");

                    b.HasIndex("ParentClaimNoteClaimNoteId");

                    b.ToTable("ClaimNote");
                });

            modelBuilder.Entity("risk.control.system.Models.ClaimReport", b =>
                {
                    b.Property<string>("ClaimReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentEmail")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("AgentLocationPicture")
                        .HasColumnType("BLOB");

                    b.Property<string>("AgentLocationPictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentOcrData")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("AgentOcrPicture")
                        .HasColumnType("BLOB");

                    b.Property<string>("AgentOcrUrl")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("AgentQrPicture")
                        .HasColumnType("BLOB");

                    b.Property<string>("AgentQrUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentRemarks")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AgentRemarksUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentReportId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssessorEmail")
                        .HasColumnType("TEXT");

                    b.Property<int?>("AssessorRemarkType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssessorRemarks")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AssessorRemarksUpdated")
                        .HasColumnType("TEXT");

                    b.Property<long>("CaseLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageType")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationData")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationLongLat")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LocationLongLatTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationPictureConfidence")
                        .HasColumnType("TEXT");

                    b.Property<string>("OcrLongLat")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OcrLongLatTime")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("PanValid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QrData")
                        .HasColumnType("TEXT");

                    b.Property<string>("Question1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Question2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Question3")
                        .HasColumnType("TEXT");

                    b.Property<string>("Question4")
                        .HasColumnType("TEXT");

                    b.Property<string>("Question5")
                        .HasColumnType("TEXT");

                    b.Property<string>("SupervisorEmail")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("SupervisorPicture")
                        .HasColumnType("BLOB");

                    b.Property<int?>("SupervisorRemarkType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SupervisorRemarks")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SupervisorRemarksUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClaimReportId");

                    b.HasIndex("AgentReportId");

                    b.HasIndex("CaseLocationId")
                        .IsUnique();

                    b.HasIndex("VendorId");

                    b.ToTable("ClaimReport");
                });

            modelBuilder.Entity("risk.control.system.Models.ClaimsInvestigation", b =>
                {
                    b.Property<string>("ClaimsInvestigationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientCompanyId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentClaimOwner")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentUserEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerDetailId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InvestigationCaseStatusId")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvestigationCaseSubStatusId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsReady2Assign")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReviewCase")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PolicyDetailId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClaimsInvestigationId");

                    b.HasIndex("ClientCompanyId");

                    b.HasIndex("CustomerDetailId");

                    b.HasIndex("InvestigationCaseStatusId");

                    b.HasIndex("InvestigationCaseSubStatusId");

                    b.HasIndex("PolicyDetailId");

                    b.HasIndex("VendorId");

                    b.ToTable("ClaimsInvestigation");
                });

            modelBuilder.Entity("risk.control.system.Models.ClientCompany", b =>
                {
                    b.Property<string>("ClientCompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Addressline")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AgreementDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiBaseUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Auto")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DistrictId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("DocumentImage")
                        .HasColumnType("BLOB");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IFSCCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PanIdfyUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PinCodeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RapidAPIGroupId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RapidAPIKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RapidAPIPanRemainCount")
                        .HasColumnType("TEXT");

                    b.Property<string>("RapidAPITaskId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("SendSMS")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StateId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("VerifyOcr")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClientCompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PinCodeId");

                    b.HasIndex("StateId");

                    b.ToTable("ClientCompany");
                });

            modelBuilder.Entity("risk.control.system.Models.CostCentre", b =>
                {
                    b.Property<string>("CostCentreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("CostCentreId");

                    b.ToTable("CostCentre");
                });

            modelBuilder.Entity("risk.control.system.Models.Country", b =>
                {
                    b.Property<string>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("risk.control.system.Models.CustomerDetail", b =>
                {
                    b.Property<string>("CustomerDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Addressline")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("ContactNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CustomerDateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerEducation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerIncome")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerOccupation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DistrictId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PinCodeId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("BLOB");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("StateId")
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerDetailId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PinCodeId");

                    b.HasIndex("StateId");

                    b.ToTable("CustomerDetail");
                });

            modelBuilder.Entity("risk.control.system.Models.DeletedMessage", b =>
                {
                    b.Property<long>("DeletedMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Attachment")
                        .HasColumnType("BLOB");

                    b.Property<string>("AttachmentName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("DeleteTrashed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Extension")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsDraft")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MailboxId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MessageStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RawMessage")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Read")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReceipientEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Trashed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("DeletedMessageId");

                    b.HasIndex("MailboxId");

                    b.ToTable("DeletedMessage");
                });

            modelBuilder.Entity("risk.control.system.Models.District", b =>
                {
                    b.Property<string>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StateId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("DistrictId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("risk.control.system.Models.DraftMessage", b =>
                {
                    b.Property<long>("DraftMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Attachment")
                        .HasColumnType("BLOB");

                    b.Property<string>("AttachmentName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("DeleteTrashed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Extension")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsDraft")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MailboxId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MessageStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Read")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReceipientEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Trashed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("DraftMessageId");

                    b.HasIndex("MailboxId");

                    b.ToTable("DraftMessage");
                });

            modelBuilder.Entity("risk.control.system.Models.FileAttachment", b =>
                {
                    b.Property<string>("FileAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("AttachedDocument")
                        .HasColumnType("BLOB");

                    b.Property<string>("ClaimsInvestigationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactMessageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FileAttachmentId");

                    b.HasIndex("ClaimsInvestigationId");

                    b.ToTable("FileAttachment");
                });

            modelBuilder.Entity("risk.control.system.Models.InboxMessage", b =>
                {
                    b.Property<long>("InboxMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Attachment")
                        .HasColumnType("BLOB");

                    b.Property<string>("AttachmentName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("DeleteTrashed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Extension")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsDraft")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MailboxId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MessageStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RawMessage")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Read")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReceipientEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Trashed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("InboxMessageId");

                    b.HasIndex("MailboxId");

                    b.ToTable("InboxMessage");
                });

            modelBuilder.Entity("risk.control.system.Models.InvestigationCase", b =>
                {
                    b.Property<string>("InvestigationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InvestigationCaseStatusId")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvestigationServiceTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LineOfBusinessId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("InvestigationId");

                    b.HasIndex("InvestigationCaseStatusId");

                    b.HasIndex("InvestigationServiceTypeId");

                    b.HasIndex("LineOfBusinessId");

                    b.ToTable("InvestigationCase");
                });

            modelBuilder.Entity("risk.control.system.Models.InvestigationCaseOutcome", b =>
                {
                    b.Property<string>("InvestigationCaseOutcomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("InvestigationCaseOutcomeId");

                    b.ToTable("InvestigationCaseOutcome");
                });

            modelBuilder.Entity("risk.control.system.Models.InvestigationCaseStatus", b =>
                {
                    b.Property<string>("InvestigationCaseStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool>("MasterData")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("InvestigationCaseStatusId");

                    b.ToTable("InvestigationCaseStatus");
                });

            modelBuilder.Entity("risk.control.system.Models.InvestigationCaseSubStatus", b =>
                {
                    b.Property<string>("InvestigationCaseSubStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvestigationCaseStatusId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("MasterData")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("InvestigationCaseSubStatusId");

                    b.HasIndex("InvestigationCaseStatusId");

                    b.ToTable("InvestigationCaseSubStatus");
                });

            modelBuilder.Entity("risk.control.system.Models.InvestigationServiceType", b =>
                {
                    b.Property<string>("InvestigationServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("LineOfBusinessId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("MasterData")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("InvestigationServiceTypeId");

                    b.HasIndex("LineOfBusinessId");

                    b.ToTable("InvestigationServiceType");
                });

            modelBuilder.Entity("risk.control.system.Models.InvestigationTransaction", b =>
                {
                    b.Property<string>("InvestigationTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimsInvestigationId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentClaimOwner")
                        .HasColumnType("TEXT");

                    b.Property<int?>("HopCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InvestigationCaseStatusId")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvestigationCaseSubStatusId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("Receiver")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sender")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Time2Update")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("footerIcon")
                        .HasColumnType("TEXT");

                    b.Property<string>("footerMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("headerIcon")
                        .HasColumnType("TEXT");

                    b.Property<string>("headerMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("messageIcon")
                        .HasColumnType("TEXT");

                    b.HasKey("InvestigationTransactionId");

                    b.HasIndex("ClaimsInvestigationId");

                    b.HasIndex("InvestigationCaseStatusId");

                    b.HasIndex("InvestigationCaseSubStatusId");

                    b.ToTable("InvestigationTransaction");
                });

            modelBuilder.Entity("risk.control.system.Models.LineOfBusiness", b =>
                {
                    b.Property<string>("LineOfBusinessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool>("MasterData")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("LineOfBusinessId");

                    b.ToTable("LineOfBusiness");
                });

            modelBuilder.Entity("risk.control.system.Models.Mailbox", b =>
                {
                    b.Property<long>("MailboxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ApplicationUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("MailboxId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Mailbox");
                });

            modelBuilder.Entity("risk.control.system.Models.OutboxMessage", b =>
                {
                    b.Property<long>("OutboxMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Attachment")
                        .HasColumnType("BLOB");

                    b.Property<string>("AttachmentName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("DeleteTrashed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Extension")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsDraft")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MailboxId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MessageStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RawMessage")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Read")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReceipientEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Trashed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("OutboxMessageId");

                    b.HasIndex("MailboxId");

                    b.ToTable("OutboxMessage");
                });

            modelBuilder.Entity("risk.control.system.Models.PinCode", b =>
                {
                    b.Property<string>("PinCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("DistrictId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Latitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("Longitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StateId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("PinCodeId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("StateId");

                    b.ToTable("PinCode");
                });

            modelBuilder.Entity("risk.control.system.Models.PolicyDetail", b =>
                {
                    b.Property<string>("PolicyDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CaseEnablerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CauseOfLoss")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ClaimType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientCompanyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ContractIssueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CostCentreId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfIncident")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("DocumentImage")
                        .HasColumnType("BLOB");

                    b.Property<string>("InvestigationServiceTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LineOfBusinessId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SumAssuredValue")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("PolicyDetailId");

                    b.HasIndex("CaseEnablerId");

                    b.HasIndex("ClientCompanyId");

                    b.HasIndex("CostCentreId");

                    b.HasIndex("InvestigationServiceTypeId");

                    b.HasIndex("LineOfBusinessId");

                    b.ToTable("PolicyDetail");
                });

            modelBuilder.Entity("risk.control.system.Models.SentMessage", b =>
                {
                    b.Property<long>("SentMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Attachment")
                        .HasColumnType("BLOB");

                    b.Property<string>("AttachmentName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("DeleteTrashed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Extension")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsDraft")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MailboxId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MessageStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RawMessage")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Read")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReceipientEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Trashed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("SentMessageId");

                    b.HasIndex("MailboxId");

                    b.ToTable("SentMessage");
                });

            modelBuilder.Entity("risk.control.system.Models.ServicedPinCode", b =>
                {
                    b.Property<string>("ServicedPinCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("VendorInvestigationServiceTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ServicedPinCodeId");

                    b.HasIndex("VendorInvestigationServiceTypeId");

                    b.ToTable("ServicedPinCode");
                });

            modelBuilder.Entity("risk.control.system.Models.State", b =>
                {
                    b.Property<string>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("risk.control.system.Models.TrashMessage", b =>
                {
                    b.Property<long>("TrashMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Attachment")
                        .HasColumnType("BLOB");

                    b.Property<string>("AttachmentName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("DeleteTrashed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Extension")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsDraft")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MailboxId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MessageStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RawMessage")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Read")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReceipientEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Trashed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("TrashMessageId");

                    b.HasIndex("MailboxId");

                    b.ToTable("TrashMessage");
                });

            modelBuilder.Entity("risk.control.system.Models.Vendor", b =>
                {
                    b.Property<string>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Addressline")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AgreementDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimsInvestigationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeListedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DelistReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DistrictId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("DocumentImage")
                        .HasColumnType("BLOB");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DomainName")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IFSCCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PinCodeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StateId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("VendorId");

                    b.HasIndex("ClaimsInvestigationId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PinCodeId");

                    b.HasIndex("StateId");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("risk.control.system.Models.VendorInvestigationServiceType", b =>
                {
                    b.Property<string>("VendorInvestigationServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DistrictId")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvestigationServiceTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LineOfBusinessId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("StateId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("VendorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("VendorInvestigationServiceTypeId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("InvestigationServiceTypeId");

                    b.HasIndex("LineOfBusinessId");

                    b.HasIndex("StateId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorInvestigationServiceType");
                });

            modelBuilder.Entity("risk.control.system.Models.VerificationLocation", b =>
                {
                    b.Property<string>("VerificationLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Addressline")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimsInvestigationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DistrictId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PinCodeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StateId")
                        .HasColumnType("TEXT");

                    b.HasKey("VerificationLocationId");

                    b.HasIndex("ClaimsInvestigationId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PinCodeId");

                    b.HasIndex("StateId");

                    b.ToTable("VerificationLocation");
                });

            modelBuilder.Entity("risk.control.system.Models.VerifyPinCode", b =>
                {
                    b.Property<string>("VerifyPinCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("CaseLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("VerifyPinCodeId");

                    b.HasIndex("CaseLocationId");

                    b.ToTable("VerifyPinCode");
                });

            modelBuilder.Entity("risk.control.system.Models.ViewModel.FileOnDatabaseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Saved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FilesOnDatabase");
                });

            modelBuilder.Entity("risk.control.system.Models.ViewModel.FileOnFileSystemModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Saved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FilesOnFileSystem");
                });

            modelBuilder.Entity("risk.control.system.Models.ViewModel.UploadClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BPhoto")
                        .HasColumnType("TEXT");

                    b.Property<string>("BPincode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BeneficiaryContact")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BeneficiaryDob")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BeneficiaryIncome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CPhoto")
                        .HasColumnType("TEXT");

                    b.Property<string>("CauseOfLoss")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerDob")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DateOfIncident")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Dept")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Income")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IssueDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PDocument")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Policy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Relation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UploadClaim");
                });

            modelBuilder.Entity("risk.control.system.Models.ClientCompanyApplicationUser", b =>
                {
                    b.HasBaseType("risk.control.system.Models.ApplicationUser");

                    b.Property<string>("ClientCompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.HasIndex("ClientCompanyId");

                    b.HasDiscriminator().HasValue("ClientCompanyApplicationUser");
                });

            modelBuilder.Entity("risk.control.system.Models.VendorApplicationUser", b =>
                {
                    b.HasBaseType("risk.control.system.Models.ApplicationUser");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<string>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasIndex("VendorId");

                    b.ToTable("AspNetUsers", t =>
                        {
                            t.Property("Comments")
                                .HasColumnName("VendorApplicationUser_Comments");
                        });

                    b.HasDiscriminator().HasValue("VendorApplicationUser");
                });

            modelBuilder.Entity("ClientCompanyVendor", b =>
                {
                    b.HasOne("risk.control.system.Models.ClientCompany", null)
                        .WithMany()
                        .HasForeignKey("ClientsClientCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.Vendor", null)
                        .WithMany()
                        .HasForeignKey("EmpanelledVendorsVendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("risk.control.system.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("risk.control.system.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("risk.control.system.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("risk.control.system.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("risk.control.system.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("risk.control.system.Models.ApplicationRole", b =>
                {
                    b.HasOne("risk.control.system.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationRoles")
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("risk.control.system.Models.ApplicationUser", b =>
                {
                    b.HasOne("risk.control.system.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("risk.control.system.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("risk.control.system.Models.PinCode", "PinCode")
                        .WithMany()
                        .HasForeignKey("PinCodeId");

                    b.HasOne("risk.control.system.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("PinCode");

                    b.Navigation("State");
                });

            modelBuilder.Entity("risk.control.system.Models.CaseLocation", b =>
                {
                    b.HasOne("risk.control.system.Models.BeneficiaryRelation", "BeneficiaryRelation")
                        .WithMany()
                        .HasForeignKey("BeneficiaryRelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.ClaimsInvestigation", "ClaimsInvestigation")
                        .WithMany("CaseLocations")
                        .HasForeignKey("ClaimsInvestigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("risk.control.system.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("risk.control.system.Models.InvestigationCaseSubStatus", "InvestigationCaseSubStatus")
                        .WithMany()
                        .HasForeignKey("InvestigationCaseSubStatusId");

                    b.HasOne("risk.control.system.Models.PinCode", "PinCode")
                        .WithMany()
                        .HasForeignKey("PinCodeId");

                    b.HasOne("risk.control.system.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("risk.control.system.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");

                    b.Navigation("BeneficiaryRelation");

                    b.Navigation("ClaimsInvestigation");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("InvestigationCaseSubStatus");

                    b.Navigation("PinCode");

                    b.Navigation("State");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("risk.control.system.Models.ClaimMessage", b =>
                {
                    b.HasOne("risk.control.system.Models.ClaimsInvestigation", null)
                        .WithMany("ClaimMessages")
                        .HasForeignKey("ClaimsInvestigationId");
                });

            modelBuilder.Entity("risk.control.system.Models.ClaimNote", b =>
                {
                    b.HasOne("risk.control.system.Models.ClaimsInvestigation", null)
                        .WithMany("ClaimNotes")
                        .HasForeignKey("ClaimsInvestigationId");

                    b.HasOne("risk.control.system.Models.ClaimNote", "ParentClaimNote")
                        .WithMany()
                        .HasForeignKey("ParentClaimNoteClaimNoteId");

                    b.Navigation("ParentClaimNote");
                });

            modelBuilder.Entity("risk.control.system.Models.ClaimReport", b =>
                {
                    b.HasOne("risk.control.system.Models.AgentReport", "AgentReport")
                        .WithMany()
                        .HasForeignKey("AgentReportId");

                    b.HasOne("risk.control.system.Models.CaseLocation", "CaseLocation")
                        .WithOne("ClaimReport")
                        .HasForeignKey("risk.control.system.Models.ClaimReport", "CaseLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");

                    b.Navigation("AgentReport");

                    b.Navigation("CaseLocation");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("risk.control.system.Models.ClaimsInvestigation", b =>
                {
                    b.HasOne("risk.control.system.Models.ClientCompany", null)
                        .WithMany("ClaimsInvestigations")
                        .HasForeignKey("ClientCompanyId");

                    b.HasOne("risk.control.system.Models.CustomerDetail", "CustomerDetail")
                        .WithMany()
                        .HasForeignKey("CustomerDetailId");

                    b.HasOne("risk.control.system.Models.InvestigationCaseStatus", "InvestigationCaseStatus")
                        .WithMany()
                        .HasForeignKey("InvestigationCaseStatusId");

                    b.HasOne("risk.control.system.Models.InvestigationCaseSubStatus", "InvestigationCaseSubStatus")
                        .WithMany()
                        .HasForeignKey("InvestigationCaseSubStatusId");

                    b.HasOne("risk.control.system.Models.PolicyDetail", "PolicyDetail")
                        .WithMany()
                        .HasForeignKey("PolicyDetailId");

                    b.HasOne("risk.control.system.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");

                    b.Navigation("CustomerDetail");

                    b.Navigation("InvestigationCaseStatus");

                    b.Navigation("InvestigationCaseSubStatus");

                    b.Navigation("PolicyDetail");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("risk.control.system.Models.ClientCompany", b =>
                {
                    b.HasOne("risk.control.system.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("risk.control.system.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("risk.control.system.Models.PinCode", "PinCode")
                        .WithMany()
                        .HasForeignKey("PinCodeId");

                    b.HasOne("risk.control.system.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("PinCode");

                    b.Navigation("State");
                });

            modelBuilder.Entity("risk.control.system.Models.CustomerDetail", b =>
                {
                    b.HasOne("risk.control.system.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("risk.control.system.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("risk.control.system.Models.PinCode", "PinCode")
                        .WithMany()
                        .HasForeignKey("PinCodeId");

                    b.HasOne("risk.control.system.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("PinCode");

                    b.Navigation("State");
                });

            modelBuilder.Entity("risk.control.system.Models.DeletedMessage", b =>
                {
                    b.HasOne("risk.control.system.Models.Mailbox", "Mailbox")
                        .WithMany("Deleted")
                        .HasForeignKey("MailboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mailbox");
                });

            modelBuilder.Entity("risk.control.system.Models.District", b =>
                {
                    b.HasOne("risk.control.system.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("risk.control.system.Models.DraftMessage", b =>
                {
                    b.HasOne("risk.control.system.Models.Mailbox", "Mailbox")
                        .WithMany("Draft")
                        .HasForeignKey("MailboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mailbox");
                });

            modelBuilder.Entity("risk.control.system.Models.FileAttachment", b =>
                {
                    b.HasOne("risk.control.system.Models.ClaimsInvestigation", "ClaimsInvestigation")
                        .WithMany()
                        .HasForeignKey("ClaimsInvestigationId");

                    b.Navigation("ClaimsInvestigation");
                });

            modelBuilder.Entity("risk.control.system.Models.InboxMessage", b =>
                {
                    b.HasOne("risk.control.system.Models.Mailbox", "Mailbox")
                        .WithMany("Inbox")
                        .HasForeignKey("MailboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mailbox");
                });

            modelBuilder.Entity("risk.control.system.Models.InvestigationCase", b =>
                {
                    b.HasOne("risk.control.system.Models.InvestigationCaseStatus", "InvestigationCaseStatus")
                        .WithMany()
                        .HasForeignKey("InvestigationCaseStatusId");

                    b.HasOne("risk.control.system.Models.InvestigationServiceType", "InvestigationServiceType")
                        .WithMany()
                        .HasForeignKey("InvestigationServiceTypeId");

                    b.HasOne("risk.control.system.Models.LineOfBusiness", "LineOfBusiness")
                        .WithMany()
                        .HasForeignKey("LineOfBusinessId");

                    b.Navigation("InvestigationCaseStatus");

                    b.Navigation("InvestigationServiceType");

                    b.Navigation("LineOfBusiness");
                });

            modelBuilder.Entity("risk.control.system.Models.InvestigationCaseSubStatus", b =>
                {
                    b.HasOne("risk.control.system.Models.InvestigationCaseStatus", "InvestigationCaseStatus")
                        .WithMany("InvestigationCaseSubStatuses")
                        .HasForeignKey("InvestigationCaseStatusId");

                    b.Navigation("InvestigationCaseStatus");
                });

            modelBuilder.Entity("risk.control.system.Models.InvestigationServiceType", b =>
                {
                    b.HasOne("risk.control.system.Models.LineOfBusiness", "LineOfBusiness")
                        .WithMany("InvestigationServiceTypes")
                        .HasForeignKey("LineOfBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LineOfBusiness");
                });

            modelBuilder.Entity("risk.control.system.Models.InvestigationTransaction", b =>
                {
                    b.HasOne("risk.control.system.Models.ClaimsInvestigation", "ClaimsInvestigation")
                        .WithMany()
                        .HasForeignKey("ClaimsInvestigationId");

                    b.HasOne("risk.control.system.Models.InvestigationCaseStatus", "InvestigationCaseStatus")
                        .WithMany()
                        .HasForeignKey("InvestigationCaseStatusId");

                    b.HasOne("risk.control.system.Models.InvestigationCaseSubStatus", "InvestigationCaseSubStatus")
                        .WithMany()
                        .HasForeignKey("InvestigationCaseSubStatusId");

                    b.Navigation("ClaimsInvestigation");

                    b.Navigation("InvestigationCaseStatus");

                    b.Navigation("InvestigationCaseSubStatus");
                });

            modelBuilder.Entity("risk.control.system.Models.Mailbox", b =>
                {
                    b.HasOne("risk.control.system.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Mailbox")
                        .HasForeignKey("risk.control.system.Models.Mailbox", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("risk.control.system.Models.OutboxMessage", b =>
                {
                    b.HasOne("risk.control.system.Models.Mailbox", "Mailbox")
                        .WithMany("Outbox")
                        .HasForeignKey("MailboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mailbox");
                });

            modelBuilder.Entity("risk.control.system.Models.PinCode", b =>
                {
                    b.HasOne("risk.control.system.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("risk.control.system.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("State");
                });

            modelBuilder.Entity("risk.control.system.Models.PolicyDetail", b =>
                {
                    b.HasOne("risk.control.system.Models.CaseEnabler", "CaseEnabler")
                        .WithMany()
                        .HasForeignKey("CaseEnablerId");

                    b.HasOne("risk.control.system.Models.ClientCompany", "ClientCompany")
                        .WithMany()
                        .HasForeignKey("ClientCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.CostCentre", "CostCentre")
                        .WithMany()
                        .HasForeignKey("CostCentreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.InvestigationServiceType", "InvestigationServiceType")
                        .WithMany()
                        .HasForeignKey("InvestigationServiceTypeId");

                    b.HasOne("risk.control.system.Models.LineOfBusiness", "LineOfBusiness")
                        .WithMany()
                        .HasForeignKey("LineOfBusinessId");

                    b.Navigation("CaseEnabler");

                    b.Navigation("ClientCompany");

                    b.Navigation("CostCentre");

                    b.Navigation("InvestigationServiceType");

                    b.Navigation("LineOfBusiness");
                });

            modelBuilder.Entity("risk.control.system.Models.SentMessage", b =>
                {
                    b.HasOne("risk.control.system.Models.Mailbox", "Mailbox")
                        .WithMany("Sent")
                        .HasForeignKey("MailboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mailbox");
                });

            modelBuilder.Entity("risk.control.system.Models.ServicedPinCode", b =>
                {
                    b.HasOne("risk.control.system.Models.VendorInvestigationServiceType", "VendorInvestigationServiceType")
                        .WithMany("PincodeServices")
                        .HasForeignKey("VendorInvestigationServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VendorInvestigationServiceType");
                });

            modelBuilder.Entity("risk.control.system.Models.State", b =>
                {
                    b.HasOne("risk.control.system.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("risk.control.system.Models.TrashMessage", b =>
                {
                    b.HasOne("risk.control.system.Models.Mailbox", "Mailbox")
                        .WithMany("Trash")
                        .HasForeignKey("MailboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mailbox");
                });

            modelBuilder.Entity("risk.control.system.Models.Vendor", b =>
                {
                    b.HasOne("risk.control.system.Models.ClaimsInvestigation", null)
                        .WithMany("Vendors")
                        .HasForeignKey("ClaimsInvestigationId");

                    b.HasOne("risk.control.system.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("risk.control.system.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("risk.control.system.Models.PinCode", "PinCode")
                        .WithMany()
                        .HasForeignKey("PinCodeId");

                    b.HasOne("risk.control.system.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("PinCode");

                    b.Navigation("State");
                });

            modelBuilder.Entity("risk.control.system.Models.VendorInvestigationServiceType", b =>
                {
                    b.HasOne("risk.control.system.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("risk.control.system.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("risk.control.system.Models.InvestigationServiceType", "InvestigationServiceType")
                        .WithMany()
                        .HasForeignKey("InvestigationServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.LineOfBusiness", "LineOfBusiness")
                        .WithMany()
                        .HasForeignKey("LineOfBusinessId");

                    b.HasOne("risk.control.system.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("risk.control.system.Models.Vendor", "Vendor")
                        .WithMany("VendorInvestigationServiceTypes")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("InvestigationServiceType");

                    b.Navigation("LineOfBusiness");

                    b.Navigation("State");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("risk.control.system.Models.VerificationLocation", b =>
                {
                    b.HasOne("risk.control.system.Models.ClaimsInvestigation", "ClaimsInvestigation")
                        .WithMany()
                        .HasForeignKey("ClaimsInvestigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("risk.control.system.Models.PinCode", "PinCode")
                        .WithMany()
                        .HasForeignKey("PinCodeId");

                    b.HasOne("risk.control.system.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("ClaimsInvestigation");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("PinCode");

                    b.Navigation("State");
                });

            modelBuilder.Entity("risk.control.system.Models.VerifyPinCode", b =>
                {
                    b.HasOne("risk.control.system.Models.CaseLocation", "CaseLocation")
                        .WithMany()
                        .HasForeignKey("CaseLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaseLocation");
                });

            modelBuilder.Entity("risk.control.system.Models.ClientCompanyApplicationUser", b =>
                {
                    b.HasOne("risk.control.system.Models.ClientCompany", "ClientCompany")
                        .WithMany("CompanyApplicationUser")
                        .HasForeignKey("ClientCompanyId");

                    b.Navigation("ClientCompany");
                });

            modelBuilder.Entity("risk.control.system.Models.VendorApplicationUser", b =>
                {
                    b.HasOne("risk.control.system.Models.Vendor", "Vendor")
                        .WithMany("VendorApplicationUser")
                        .HasForeignKey("VendorId");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("risk.control.system.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationRoles");

                    b.Navigation("Mailbox");
                });

            modelBuilder.Entity("risk.control.system.Models.CaseLocation", b =>
                {
                    b.Navigation("ClaimReport");
                });

            modelBuilder.Entity("risk.control.system.Models.ClaimsInvestigation", b =>
                {
                    b.Navigation("CaseLocations");

                    b.Navigation("ClaimMessages");

                    b.Navigation("ClaimNotes");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("risk.control.system.Models.ClientCompany", b =>
                {
                    b.Navigation("ClaimsInvestigations");

                    b.Navigation("CompanyApplicationUser");
                });

            modelBuilder.Entity("risk.control.system.Models.InvestigationCaseStatus", b =>
                {
                    b.Navigation("InvestigationCaseSubStatuses");
                });

            modelBuilder.Entity("risk.control.system.Models.LineOfBusiness", b =>
                {
                    b.Navigation("InvestigationServiceTypes");
                });

            modelBuilder.Entity("risk.control.system.Models.Mailbox", b =>
                {
                    b.Navigation("Deleted");

                    b.Navigation("Draft");

                    b.Navigation("Inbox");

                    b.Navigation("Outbox");

                    b.Navigation("Sent");

                    b.Navigation("Trash");
                });

            modelBuilder.Entity("risk.control.system.Models.Vendor", b =>
                {
                    b.Navigation("VendorApplicationUser");

                    b.Navigation("VendorInvestigationServiceTypes");
                });

            modelBuilder.Entity("risk.control.system.Models.VendorInvestigationServiceType", b =>
                {
                    b.Navigation("PincodeServices");
                });
#pragma warning restore 612, 618
        }
    }
}
